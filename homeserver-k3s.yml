---
- name: configure k3s master
  hosts: all
#    - master_node
#    - worker_node
  become: true

  vars:
    k3s_version: v1.20.5+k3s1
    k9s_version: v0.24.8
    use_docker: false
    architecture_map:
      aarch64: arm64
      armv7l: arm
      x86_64: x86_64
    docker_json:
      log-driver: json-file
      log-opts:
        max-size: 100m
      storage-driver: overlay2
        - 9.9.9.9
        - 149.112.112.112

  tasks:
    - debug:
        var: inventory_hostname

    - debug:
        var: ansible_hostname

    - assert:
        that: false

    - name: set legacy iptables for k3s for debian
      alternatives:
        name: '{{ item }}'
        path: '/usr/sbin/{{ item }}-legacy'
      loop:
        - iptables
        - ip6tables
      when: ansible_distribution | lower == "debian"

    - name: install python-apt
      apt:
        name: python3-apt
      check_mode: false
      when: ansible_check_mode|bool

    - name: install packages
      apt:
        name:
          - unattended-upgrades     # auto-upgrade packages
          - nfs-kernel-server       # nfs server for serving storage to cluster
          - wireguard               # wireguard for communication between k3s nodes
        update_cache: true
      register: apt_status
      until: apt_status is success
      delay: 10
      retries: 20

    - name: set node_ip to ansible_default_ipv4 if undefined
      set_fact:
        node_ip: '{{ node_ip | default( ansible_default_ipv4.address ) }}'

    - name: export filesystes to
      set_fact:
        export_to_address: '{{ export_to_address | default(["10.42.0.0/16", "127.0.0.1/32"]) }}'
        master_nodes: '{{ groups["master_node"] | map("extract", hostvars, "node_ip") | list }}'
        worker_nodes: '{{ groups["worker_node"] | map("extract", hostvars, "node_ip") | list }}'

    - name: share /srv to the kubernetes cluster, so other nodes can start containers
      lineinfile:
        path: /etc/exports
        line: /srv {{ item }}(rw,fsid=0,sync,no_subtree_check,no_auth_nlm,insecure,no_root_squash)
        mode: 0644
      loop: '{{ master_nodes + worker_nodes }}'
      register: etc_exportfs

    - name: export filesystems through nfs
      command: exportfs -r
      when: etc_exportfs is changed

    # https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner
    - name: prepare space for nfs-subdir-external-provisioner
      file:
        path: /srv/automatic-pvcs
        state: directory
        mode: a=rwxt

    # docker

    - name: install docker runtime
      apt:
        name: docker.io
      when: use_docker

    - name: configure docker
      copy:
        dest: /etc/docker/daemon.json
        content: '{{ docker_json | default({}) | to_nice_json  }}'
        mode: 0644
      register: docker_json_file
      when:
        - docker_json is defined
        - use_docker

    - name: restart docker
      systemd:
        name: docker
        enabled: true
        state: restarted
      when:
        - docker_json_file is changed
        - use_docker

    - name: set docker arg for k3s
      set_fact:
        docker_arg: '--docker'
      when: use_docker

    ## ufw

    - name: install ufw
      package:
        name: ufw

    - name: enable and start ufw
      systemd:
        name: ufw
        enabled: true
        state: started

    - name: ufw allow ssh
      ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: allow wire guard between nodes
      ufw:
        rule: allow
        port: '51820'
        from: '{{ item }}'
      loop: '{{ master_nodes + worker_nodes }}'

    - name: ufw allow kubernets api
      ufw:
        rule: allow
        port: '6443'
        proto: tcp
        from: '{{ item }}'
      loop: '{{ master_nodes + worker_nodes }}'

    - name: allow nfs from the nodes
      ufw:
        rule: allow
        port: '2049'
        from: '{{ item }}'
      loop: '{{ master_nodes + worker_nodes }}'

    - name: allow internal kubernetes communication
      ufw:
        rule: allow
        from_ip: 10.42.0.0/16

    - name: allow kubernetes and pods to connect to systemd-resolv
      ufw:
        rule: allow
        port: '5355'
        from_ip: fe80::/64

    - name: allow forwarding to pods
      ini_file:
        path: /etc/default/ufw
        section: null
        option: DEFAULT_FORWARD_POLICY
        value: '"ACCEPT"'
        no_extra_spaces: true
        mode: 0644
      register: ufw_defaults

    - name: restart ufw on config change
      systemd:
        name: ufw
        state: restarted
      when: ufw_defaults is changed

    - name: enable ufw and set policy
      ufw:
        policy: reject
        state: enabled

    # install kubernetes

    - name: remove swapfile from /etc/fstab
      mount:
        name: '{{ item }}'
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: disable swap
      command: swapoff -a
      when: ansible_swaptotal_mb > 0

    - name: get k3s install script from stable branch
      get_url:
        url: https://raw.githubusercontent.com/k3s-io/k3s/release-1.20/install.sh
        checksum: sha256:c63032985492e6fb3e7642b244a22ec7ad2f5a4f023a729de77b941dd19c6a59
        dest: /root/install.sh
        mode: 0755

    # install master node

    - name: install / upgrade k3s on master
      command: /root/install.sh
      environment:
        INSTALL_K3S_EXEC: '{{ docker_arg|default("") }} --node-ip {{ node_ip }} --disable=traefik --disable local-storage --kubelet-arg=image-gc-low-threshold=70 --kubelet-arg=image-gc-high-threshold=75 --flannel-backend wireguard'
        INSTALL_K3S_VERSION: '{{ k3s_version }}'
      register: k3s_server
      changed_when: k3s_server.rc == 0
      when: inventory_hostname in groups["master_node"]

    - name: bash completion directory on master
      file:
        path: /etc/bash_completion.d
        state: directory
        mode: 0755
      when: inventory_hostname in groups["master_node"]

    - name: generate bash completion on master
      shell: '{{ item }} completion bash > /etc/bash_completion.d/{{ item }}'
      args:
        creates: '/etc/bash_completion.d/{{ item }}'
      loop:
        - kubectl
        - crictl
      when: inventory_hostname in groups["master_node"]

    - name: download k9s on master
      get_url:
        url: 'https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_{{ architecture_map[ansible_architecture] }}.tar.gz'
        checksum: 'sha256:https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/checksums.txt'
        dest: /tmp/k9s.tar.gz
      register: k9s_download
      when: inventory_hostname in groups["master_node"]

    - name: uncompress k9s on master
      unarchive:
        src: /tmp/k9s.tar.gz
        dest: /usr/local/bin
        remote_src: true
        mode: 0755
      when:
        - not ansible_check_mode
        - k9s_download is changed
        - inventory_hostname in groups["master_node"]

    # worker node

    - name: wait for master node to finish
      wait_for:
        port: 6443
      run_once: true
      delegate_to: groups["master_node"][0]
      when: inventory_hostname in groups["worker_node"]

    - name: get join token form the master node
      slurp:
        src: /etc/rancher/node/password
      register: k3s_token
      delegate_to: '{{ groups["master_node"][0] }}'
      when: inventory_hostname in groups["worker_node"]

    - name: prepare variables for joining master
      set_fact:
        k3s_url: '{{ groups["master_node"][0] }}'
        k3s_token: '{{ k3s_token.content | b64decode }}'
      when: inventory_hostname in groups["worker_node"]

    - name: install / upgrade k3s on worker
      command: /root/install.sh
      environment:
        INSTALL_K3S_EXEC: '{{ docker_arg|default("") }} --node-ip {{ node_ip }} --disable=traefik --disable local-storage --default-local-storage-path=/opt/local-path-provider --kubelet-arg=image-gc-low-threshold=70 --kubelet-arg=image-gc-high-threshold=75 --flannel-backend wireguard'
        INSTALL_K3S_VERSION: '{{ k3s_version }}'
        K3S_URL: '{{ k3s_url }}'
        K3S_TOKEN: '{{ k3s_token }}'
      register: k3s_server
      changed_when: k3s_server.rc == 0
      when: inventory_hostname in groups["worker_node"]
