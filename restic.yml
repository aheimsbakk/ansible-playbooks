# vim: ai et ts=2 st=2 sw=2 :
---
- name: configure restic for all restic sources
  hosts: restic
  become: true

  tasks:
    - name: check that variables is set before we start
      ansible.builtin.assert:
        that:
          - restic_backup is defined
          - restic_destination is defined
          - restic_destination_dir is defined
          - restic_destination_user is defined
          - restic_options is defined
          - restic_passwd is defined

    #
    # Prepare the restic destination with a uniqe user.
    # Prepare the .ssh folder and add our rclone config.
    # Rclone config have one profile "restic".
    #

    - name: restic_destination - create destination user
      ansible.builtin.user:
        name: '{{ restic_destination_user }}'
        shell: /bin/bash
      run_once: true
      delegate_to: '{{ restic_destination }}'

    - name: restic_destination - create .ssh folder for restic_user
      ansible.builtin.file:
        path: '/home/{{ restic_destination_user }}/.ssh'
        state: directory
        owner: '{{ restic_destination_user }}'
        mode: '0700'
      run_once: true
      delegate_to: '{{ restic_destination }}'

    - name: restic_destination - create rclone config folder
      ansible.builtin.file:
        path: '/home/{{ restic_destination_user }}/{{ item }}'
        state: directory
        owner: '{{ restic_destination_user }}'
        mode: '0700'
      run_once: true
      delegate_to: '{{ restic_destination }}'
      loop:
        - .config
        - .config/rclone

    - name: restic_destination - create rclone configuration
      community.general.ini_file:
        path: '/home/{{ restic_destination_user }}/.config/rclone/rclone.conf'
        section: restic
        option: type
        value: local
        owner: '{{ restic_destination_user }}'
        mode: '0600'
      run_once: true
      delegate_to: '{{ restic_destination }}'

    #
    # Start orcestration of configuring restic backup on multiple hosts
    #

    - name: install rclone and restic
      ansible.builtin.package:
        name:
          - rclone
          - restic

    - name: store restic password to /var/lib/misc
      ansible.builtin.copy:
        dest: /var/lib/misc/restic-service-passwd
        # owner: root
        owner: "{{ restic_destination_user if inventory_hostname == restic_destination else 'root' }}"
        mode: 0400
        content: '{{ restic_passwd }}'

    - name: init repo if it does not exists
      ansible.builtin.command:
        argv:
          - restic
          - -r
          - '{{ restic_destination_dir }}'
          - init
        creates: '{{ restic_destination_dir }}/config'
      environment:
        RESTIC_PASSWORD_FILE: /var/lib/misc/restic-service-passwd
      run_once: true
      delegate_to: '{{ restic_destination }}'
      become_user: '{{ restic_destination_user }}'

    - name: create ssh-key for the root user if it's missing
      ansible.builtin.user:
        name: root
        generate_ssh_key: yes
        ssh_key_type: ed25519
        force: no

    - name: read public key into variable
      ansible.builtin.slurp:
        src: /root/.ssh/id_ed25519.pub
      register: ssh_pub_key

    - name: add restic_destination to known_hosts
      ansible.builtin.known_hosts:
        name: '{{ hostvars[restic_destination].ansible_facts.fqdn }}'
        key: '{{ hostvars[restic_destination].ansible_facts.fqdn }},{{ hostvars[restic_destination].ansible_facts.default_ipv4.address }} {{ hostvars[restic_destination].ansible_facts.ssh_host_key_ed25519_public_keytype }} {{ hostvars[restic_destination].ansible_facts.ssh_host_key_ed25519_public }}'
        path: /root/.ssh/known_hosts

    - name: write public key to restic_destination
      ansible.posix.authorized_key:
        user: '{{ restic_destination_user }}'
        key: '{{ ssh_pub_key.content | b64decode }}'
        comment: '{{ ansible_fqdn }}'
        key_options: restrict,command="rclone serve restic --stdio --append-only --transfers 2 restic:{{ restic_destination_dir }}"
        # "
      delegate_to: '{{ restic_destination }}'
      throttle: 1

    - name: add systemd service for running rclone
      ansible.builtin.copy:
        dest: /etc/systemd/system/restic.service
        mode: 0644
        content: |
          [Unit]
          Description=Run backup with Restic
          After=network.target

          [Service]
          Type=oneshot
          Environment='RESTIC_PASSWORD_FILE=/var/lib/misc/restic-service-passwd' 'HOME=/root'
          ExecStart=restic -o rclone.program='ssh -l {{ restic_destination_user }} {{ restic_destination }}' -r rclone: backup \
                    {{ restic_options }} \
                    --exclude-if-present .restic-ignore \
                    -H {{ ansible_hostname }} \
                    {{ restic_backup }}

      # '

    - name: add systemd timer for running restic
      ansible.builtin.copy:
        dest: /etc/systemd/system/restic.timer
        mode: 0644
        content: |
          [Unit]
          Description=Run backup with Restic daily

          [Timer]
          OnCalendar=daily
          AccuracySec=12h
          #OnBootSec=1h
          Persistent=true

          [Install]
          WantedBy=timers.target

    - name: enable the systemd timer of restic
      ansible.builtin.systemd:
        name: restic.timer
        daemon_reload: true
        state: started
        enabled: true
      ignore_errors: true
