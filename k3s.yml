---
- name: Common configuration for k3s nodes
  hosts:
    - k3s_master
    - k3s_agents
  become: true

  tasks:
    - name: Set variables for all plays
      ansible.builtin.set_fact:
        k3s_master: '{{ groups["k3s_master"] | map("extract", hostvars, "node_ip") | list }}'
        k3s_agents: '{{ groups["k3s_agents"] | map("extract", hostvars, "node_ip") | list }}'
        k3s_version: '{{ k3s_version | default("v1.25.3+k3s1") }}'
        k9s_version: '{{ k9s_version | default("v0.26.7") }}'

    - name: Install python-apt
      ansible.builtin.apt:
        name: python3-apt
      check_mode: false
      when: ansible_check_mode | bool

    - name: Install packages
      ansible.builtin.apt:
        name:
          - curl                    # needed by k3s installation script
          - unattended-upgrades     # auto-upgrade packages
          - wireguard               # wireguard for communication between k3s nodes
        update_cache: true

    ## ufw

    - name: Install ufw
      ansible.builtin.package:
        name: ufw

    - name: Enable and start ufw
      ansible.builtin.systemd:
        name: ufw
        enabled: true
        state: started

    - name: Ufw allow ssh
      community.general.ufw:
        rule: allow
        port: '22'
        proto: tcp

    - name: Ufw allow wireguard
      community.general.ufw:
        rule: allow
        port: '51820'
        proto: udp

    # - name: allow internal kubernetes communication
    #   ansible.builtin.ufw:
    #     rule: allow
    #     from: 10.42.0.0/16
    #     to: 10.42.0.0/16

    - name: Ufw allow kubelet metrics
      community.general.ufw:
        rule: allow
        port: '10250'
        proto: tcp
        from: '{{ item }}'
      loop: '{{ k3s_master + k3s_agents }}'

    - name: Ufw allow kubernetes api
      community.general.ufw:
        rule: allow
        port: '6443'
        proto: tcp
        from: '{{ item }}'
      loop: '{{ k3s_master + k3s_agents + ["10.42.0.0/16"] }}'
      when: inventory_hostname in groups["k3s_master"]

    - name: Ufw allow etcd between masters
      community.general.ufw:
        rule: allow
        port: '2379:2380'
        proto: tcp
        from: '{{ item }}'
      loop: '{{ k3s_master }}'
      when: inventory_hostname in groups["k3s_master"]

    - name: Allow kubernetes and pods to connect to systemd-resolv
      community.general.ufw:
        rule: allow
        port: '5355'
        from_ip: fe80::/64

    - name: Allow forwarding to pods
      community.general.ini_file:
        path: /etc/default/ufw
        section: null
        option: DEFAULT_FORWARD_POLICY
        value: '"ACCEPT"'
        no_extra_spaces: true
        mode: 0644
      register: ufw_defaults

    - name: Restart ufw on config change
      ansible.builtin.systemd:
        name: ufw
        state: restarted
      when: ufw_defaults is changed

    - name: Enable ufw and set policy
      community.general.ufw:
        policy: reject
        state: enabled

    - name: Remove swapfile from /etc/fstab
      ansible.posix.mount:
        name: '{{ item }}'
        fstype: swap
        state: absent
      with_items:
        - swap
        - none

    - name: Disable swap
      ansible.builtin.command: swapoff -a
      when: ansible_swaptotal_mb > 0
      changed_when: false

    - name: Get k3s install script from stable branch
      ansible.builtin.get_url:
        url: https://raw.githubusercontent.com/k3s-io/k3s/v1.27.3%2Bk3s1/install.sh
        checksum: sha256:fbcfd9f516127878984a81f1f25b085f5913933171977bfdf5189e95df3f4fc1
        dest: /root/install.sh
        mode: 0755

    - name: Allow ping from containers which has net_admin + net_raw
      ansible.posix.sysctl:
        name: net.ipv4.ping_group_range
        value: "0 2147483647"
        sysctl_set: true
        reload: true

    - name: Set UDP buffer size for HTTP3
      ansible.posix.sysctl:
        name: "{{ item.n }}"
        value: "{{ item.v }}"
        sysctl_set: true
        reload: true
      loop:
        - n: "net.core.rmem_max"
          v: "7500000"
        - n: "net.core.wmem_max"
          v: "7500000"

###############################################################################

- name: Configure k3s master nodes
  hosts: k3s_master
  become: true
  vars:
    architecture_map:
      aarch64: arm64
      armv7l: arm
      x86_64: amd64

  tasks:
    - name: Ufw allow nfs
      community.general.ufw:
        rule: allow
        port: '{{ item.0 | string }}'
        from: '{{ item.1 }}'
      loop: '{{ [111, 2049, 20048] | product(k3s_master + k3s_agents) | list }}'
      when: nfs_ip is not defined

    - name: Install nfs for serving storage to the cluster
      ansible.builtin.apt:
        name: nfs-kernel-server
      when: nfs_ip is not defined

    # https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner
    - name: Prepare space for nfs-subdir-external-provisioner and general volume to all nodes
      ansible.builtin.file:
        path: /nfs4/{{ item }}
        state: directory
        mode: a=rwxt
      loop:
        - k3s
      when: nfs_ip is not defined

    - name: Share /nfs4 to the kubernetes cluster, so other nodes can start containers
      ansible.builtin.lineinfile:
        path: /etc/exports
        line: /nfs4/k3s {{ item }}(rw,async,no_subtree_check,no_auth_nlm,insecure,no_root_squash)
        mode: 0644
        create: true
      loop: '{{ k3s_master + k3s_agents }}'
      register: etc_exportfs
      when: nfs_ip is not defined

    - name: Export filesystems through nfs
      ansible.builtin.command: exportfs -r
      when:
        - etc_exportfs is changed
        - nfs_ip is not defined
      changed_when: false

    - name: Install nfs client
      ansible.builtin.apt:
        name: nfs-client

    - name: Mount nfs shared volume on srv
      ansible.posix.mount:
        path: /srv
        src: '{{ nfs_ip | default(node_ip) }}:/nfs4/k3s'
        opts: tcp,async
        state: mounted
        fstype: nfs4

    - name: Install / upgrade k3s on master
      ansible.builtin.command: /root/install.sh
      environment:
        INSTALL_K3S_EXEC: 'server --node-ip {{ node_ip }} --node-external-ip {{ node_ip }} --disable traefik --write-kubeconfig-mode 600 --write-kubeconfig /root/.kube/config --kubelet-arg image-gc-low-threshold=70 --kubelet-arg image-gc-high-threshold=75 --flannel-backend wireguard-native --flannel-external-ip'
        # INSTALL_K3S_EXEC: '--node-ip {{ node_ip }} --disable traefik --node-taint "k3s-controlplane=true:NoSchedule" --write-kubeconfig-mode 600 --write-kubeconfig /root/.kube/config --kubelet-arg image-gc-low-threshold=70 --kubelet-arg image-gc-high-threshold=75 --flannel-backend wireguard'
        INSTALL_K3S_VERSION: '{{ k3s_version }}'
      register: k3s_server
      changed_when: k3s_server.rc == 0

    - name: Bash completion directory on master
      ansible.builtin.file:
        path: /etc/bash_completion.d
        state: directory
        mode: 0755

    - name: Generate bash completion on master
      ansible.builtin.copy:
        content: |
          #!/bin/bash
          if [[ $(id -u) -eq 0 ]]
          then
            . <(kubectl completion bash)
            . <(crictl completion bash)
          fi
        dest: /etc/bash_completion.d/k3s
        mode: 0644

    - name: Download k9s on master
      ansible.builtin.get_url:
        url: 'https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/k9s_Linux_{{ architecture_map[ansible_architecture] }}.tar.gz'
        checksum: 'sha256:https://github.com/derailed/k9s/releases/download/{{ k9s_version }}/checksums.sha256'
        dest: /tmp/k9s.tar.gz
        mode: "0644"
      register: k9s_download

    - name: Uncompress k9s on master
      ansible.builtin.unarchive:
        src: /tmp/k9s.tar.gz
        dest: /usr/local/bin
        remote_src: true
        mode: 0755
      when:
        - not ansible_check_mode
        - k9s_download is changed

    - name: Wait for master node to finish
      ansible.builtin.wait_for:
        port: 6443

    - name: Logrotate for traefik container
      ansible.builtin.copy:
        mode: "0644"
        dest: /etc/logrotate.d/traefik
        content: |
          /srv/traefik/log/access.log {
            daily
            rotate 14
            compress
            delaycompress
            missingok
            notifempty
            create 644 root root
            copytruncate
          }

###############################################################################

- name: Configure k3s agent node
  hosts: k3s_agents
  become: true

  tasks:
    - name: Install nfs client for mounting nfs on all agents
      ansible.builtin.apt:
        name: nfs-client

    - name: Mount nfs shared volume on srv
      ansible.posix.mount:
        path: /srv
        src: '{{ nfs_ip | default(hostvars[groups["k3s_master"][0]]["node_ip"]) }}:/nfs4/k3s'
        opts: tcp
        state: mounted
        fstype: nfs4

    - name: Get join token form the master node
      ansible.builtin.slurp:
        src: /var/lib/rancher/k3s/server/node-token
      register: k3s_token
      delegate_to: '{{ groups["k3s_master"][0] }}'

    - name: Prepare variables for joining master
      ansible.builtin.set_fact:
        k3s_url: '{{ hostvars[groups["k3s_master"][0]]["node_ip"] }}'
        k3s_token: '{{ k3s_token.content | b64decode | trim }}'

    - name: Install / upgrade k3s on agent
      ansible.builtin.command: /root/install.sh
      environment:
        INSTALL_K3S_EXEC: '--node-ip {{ node_ip }} --node-external-ip {{ node_ip }} --kubelet-arg=image-gc-low-threshold=70 --kubelet-arg=image-gc-high-threshold=75'
        INSTALL_K3S_VERSION: '{{ k3s_version }}'
        K3S_URL: 'https://{{ k3s_url }}:6443'
        K3S_TOKEN: '{{ k3s_token }}'
      register: k3s_server
      changed_when: k3s_server.rc == 0
